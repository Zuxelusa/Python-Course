'''Задача 43.
Дана последовательность чисел. Получить список уникальных элементов заданной последовательности. Пример:
[1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]

def get_unique(lst):
    pass
test_data = [
    [[1, 1, 2], [2]],
    [[1, 2, 3, 5, 1, 5, 3, 10], [2, 10]]
]
for nums, exp in test_data:
    assert get_unique(nums) == exp
    assert get_unique_func(nums) == exp
'''

# lst = [1, 2, 3, 5, 1, 5, 3, 10]
#
# def get_unique(lst):
#     result = []
#     for item in lst:
#         calc = 0
#         for i in lst:
#             if item == i: calc += 1
#         if calc == 1: result.append(item)
#     return result
#
#
# print(get_unique(lst))
#
# dict((x, lst.count(x)) for x in set(lst) if lst.count(x) > 1)
# print (dict.values)

'''Задача 41.
Вычислить обратную польскую запись. Вычислите значение арифметического выражения в обратной польской записи. Допустимые операторы +, -, * и /. Каждый операнд может быть целым числом или другим выражением. Обратите внимание, что деление между двумя целыми числами должно усекаться до нуля. Числа в стеке всегда округляем до целых
Обра́тная по́льская за́пись (англ. Reverse Polish notation, RPN) — форма записи математических и логических выражений, в которой операнды расположены перед знаками операций ( https://ru.wikipedia.org/wiki/Обратная_польская_запись )
["2","1","+","3","*"] -> 9 Пример: (3 * (2 + 1)) = 9



["3", "4", "5", "+", "", "6", "1", "2", "+", "/", "-"] -> 25 Пример: ( 3\(4+5))-(6/(1+2) )


["4","13","5","/","+"] -> 6 Пример: (4 + (13 / 5)) = 6
["10","6","9","3","+","-11","","/","","17","+","5","+"] -> 22 Пример: ((10 (6 / ((9 + 3) -11))) + 17) + 5 = 22
'''
import re

formula = "(3*(4+5))-(6/(1+2))"

lst = ["3", "4", "5", "+", "", "6", "1", "2", "+", "/", "-"]

stack = []
for el in lst:
    if el.isdigit():
        stack.append(el)
    elif: el.is
        stack




